{"version":3,"file":"polyfill.es6.min.js","sources":["../../../js/src/web-streams/utils.ts","../../../js/src/web-streams/lib/helpers/miscellaneous.ts","../../../js/src/web-streams/lib/helpers/webidl.ts","../../../js/src/web-streams/lib/simple-queue.ts","../../../js/src/web-streams/lib/readable-stream/generic-reader.ts","../../../js/src/web-streams/lib/abstract-ops/internal-methods.ts","../../../js/src/web-streams/stub/number-isfinite.ts","../../../js/src/web-streams/stub/math-trunc.ts","../../../js/src/web-streams/lib/validators/basic.ts","../../../js/src/web-streams/lib/validators/readable-stream.ts","../../../js/src/web-streams/lib/readable-stream/default-reader.ts","../../../js/src/web-streams/target/es5/stub/async-iterator-prototype.ts","../../../js/src/web-streams/lib/readable-stream/async-iterator.ts","../../../js/src/web-streams/stub/number-isnan.ts","../../../js/src/web-streams/lib/abstract-ops/ecmascript.ts","../../../js/src/web-streams/lib/abstract-ops/miscellaneous.ts","../../../js/src/web-streams/lib/abstract-ops/queue-with-sizes.ts","../../../js/src/web-streams/lib/readable-stream/byte-stream-controller.ts","../../../js/src/web-streams/lib/readable-stream/byob-reader.ts","../../../js/src/web-streams/lib/abstract-ops/queuing-strategy.ts","../../../js/src/web-streams/lib/validators/queuing-strategy.ts","../../../js/src/web-streams/lib/validators/underlying-sink.ts","../../../js/src/web-streams/lib/validators/writable-stream.ts","../../../js/src/web-streams/lib/abort-signal.ts","../../../js/src/web-streams/lib/writable-stream.ts","../../../js/src/web-streams/stub/native.ts","../../../js/src/web-streams/stub/dom-exception.ts","../../../js/src/web-streams/lib/readable-stream/pipe.ts","../../../js/src/web-streams/lib/readable-stream/default-controller.ts","../../../js/src/web-streams/lib/readable-stream/tee.ts","../../../js/src/web-streams/lib/validators/underlying-source.ts","../../../js/src/web-streams/lib/validators/reader-options.ts","../../../js/src/web-streams/lib/validators/pipe-options.ts","../../../js/src/web-streams/lib/readable-stream.ts","../../../js/src/web-streams/lib/validators/readable-writable-pair.ts","../../../js/src/web-streams/lib/validators/iterator-options.ts","../../../js/src/web-streams/lib/validators/queuing-strategy-init.ts","../../../js/src/web-streams/lib/byte-length-queuing-strategy.ts","../../../js/src/web-streams/lib/count-queuing-strategy.ts","../../../js/src/web-streams/lib/validators/transformer.ts","../../../js/src/web-streams/lib/transform-stream.ts","../../../js/src/web-streams/polyfill.ts"],"sourcesContent":["/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator](this: AsyncIterator<any>) {\n      return this;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\ntry {\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\ntry {\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","import {\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  ReadableByteStreamController,\n  ReadableStream,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultReader,\n  TransformStream,\n  TransformStreamDefaultController,\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter\n} from './ponyfill';\nimport { globals } from './utils';\n\n// Export\nexport * from './ponyfill';\n\nconst exports = {\n  ReadableStream,\n  ReadableStreamDefaultController,\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader,\n\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter,\n\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n\n  TransformStream,\n  TransformStreamDefaultController\n};\n\n// Add classes to global scope\nif (typeof globals !== 'undefined') {\n  for (const prop in exports) {\n    if (Object.prototype.hasOwnProperty.call(exports, prop)) {\n      Object.defineProperty(globals, prop, {\n        value: exports[prop as (keyof typeof exports)],\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n}\n"],"names":["noop","globals","self","window","globalThis","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","undefined","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","SimpleQueue","constructor","this","_cursor","_size","_front","_elements","_next","_back","length","push","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","shift","oldFront","newFront","oldCursor","newCursor","elements","forEach","callback","i","node","peek","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","AbortSteps","Symbol","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","releaseLock","Object","hasOwnProperty","_disturbed","_readableStreamController","AsyncIteratorPrototype","defineProperties","enumerable","toStringTag","defineProperty","configurable","asyncIterator","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","return","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","_a","setPrototypeOf","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","CloneAsUint8Array","O","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","ResetQueue","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","error","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","shouldPull","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInternal","firstDescriptor","ReadableByteStreamControllerRespondInClosedState","remainderSize","remainder","ReadableByteStreamControllerRespondInReadableState","transferredBuffer","firstPendingPullInto","ReadableStreamError","create","request","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","r","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","DataView","BYTES_PER_ELEMENT","ctor","emptyView","ReadableByteStreamControllerPullInto","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","original","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","abort","start","type","write","convertUnderlyingSink","InitializeWritableStream","sizeAlgorithm","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException","signal","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","createAbortController","_writeAlgorithm","_closeAlgorithm","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","sinkWritePromise","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","message","Error","captureStackTrace","writable","createDOMExceptionPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","action","aborted","addEventListener","isOrBecomesErrored","shutdown","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","ReadableStreamTee","cloneForBranch2","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","clonedChunk","otherCanceled","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableByteStream","ReadableByteStreamTee","readAgain","CreateReadableStream","ReadableStreamDefaultTee","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReadableStreamReaderMode","mode","convertPipeOptions","options","isAbortSignal","assertAbortSignal","Boolean","ReadableStream","rawUnderlyingSource","underlyingSource","pull","convertUnderlyingDefaultOrByteSource","InitializeReadableStream","underlyingByteSource","SetUpReadableByteStreamControllerFromUnderlyingSource","SetUpReadableStreamDefaultControllerFromUnderlyingSource","getReader","rawOptions","convertReaderOptions","pipeThrough","rawTransform","transform","readable","convertReadableWritablePair","pipeTo","destination","tee","values","impl","iterator","AcquireReadableStreamAsyncIterator","convertIteratorOptions","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","flush","readableType","writableType","convertTransformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","startPromise","_transformStreamController","_backpressureChangePromise","_writable","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamError","TransformStreamDefaultSinkAbortAlgorithm","_readable","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","CreateWritableStream","_backpressureChangePromise_resolve","InitializeTransformStream","TransformStreamDefaultController","transformAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","flushAlgorithm","_controlledTransformStream","_transformAlgorithm","SetUpTransformStreamDefaultController","SetUpTransformStreamDefaultControllerFromTransformer","IsTransformStream","IsTransformStreamDefaultController","terminate","TransformStreamDefaultControllerTerminate","readableController","ReadableStreamDefaultControllerHasBackpressure","exports","prop"],"mappings":"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"}