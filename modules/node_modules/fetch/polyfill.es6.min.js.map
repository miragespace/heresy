{"version":3,"file":"polyfill.es6.min.js","sources":["../../../js/src/fetch/headers.ts","../../../js/src/utils.ts","../../../js/src/fetch/polyfill.ts"],"sourcesContent":["function normalizeName(name: string | number) {\n  if (typeof name !== \"string\") {\n    name = String(name);\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === \"\") {\n    throw new TypeError(\n      'Invalid character in header field name: \"' + name + '\"'\n    );\n  }\n  return name.toLowerCase();\n}\n\nfunction normalizeValue(value: string | number) {\n  if (typeof value !== \"string\") {\n    value = String(value);\n  }\n  return value;\n}\n\nfunction iteratorFor<T, R>(items: T[]) {\n  var iterator: IterableIterator<R> = {\n    // @ts-ignore\n    next() {\n      var value = items.shift();\n      return { done: value === undefined, value: value };\n    },\n    [Symbol.iterator]() {\n      return iterator;\n    },\n  };\n\n  return iterator;\n}\n\nexport default class Headers {\n  map: Record<string, string> = {};\n\n  constructor(headers: unknown) {\n    if (headers instanceof Headers) {\n      headers.forEach((value, name) => {\n        this.append(name, value);\n      });\n    } else if (Array.isArray(headers)) {\n      headers.forEach((header) => {\n        this.append(header[0], header[1]);\n      });\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach((name: string) => {\n        this.append(name, (headers as any)[name]);\n      });\n    }\n  }\n\n  append(name: string | number, value: string | number) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + \", \" + value : value;\n  }\n\n  delete(name: string | number) {\n    delete this.map[normalizeName(name)];\n  }\n\n  has(name: string | number): boolean {\n    return this.map.hasOwnProperty(normalizeName(name));\n  }\n\n  get(name: string | number): string | null {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null;\n  }\n\n  set(name: string | number, value: string | number) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  }\n\n  forEach(\n    callback: (value: string, key: string, parent?: object) => void,\n    thisArg?: object\n  ) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  }\n\n  keys(): IterableIterator<string> {\n    var items: string[] = [];\n    this.forEach(function (value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items);\n  }\n\n  values(): IterableIterator<string> {\n    var items: string[] = [];\n    this.forEach(function (value) {\n      items.push(value);\n    });\n    return iteratorFor(items);\n  }\n\n  entries(): IterableIterator<[string, string]> {\n    var items: string[][] = [];\n    this.forEach(function (value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n}\n","/// <reference lib=\"dom\" />\n\nfunction getGlobals() {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import Headers from \"./headers\";\nimport { globals } from \"../utils\";\n\nexport { Headers };\n\nconst m = {\n  Headers,\n};\n\n// Add classes to global scope\nif (typeof globals !== \"undefined\") {\n  for (const prop in m) {\n    if (Object.prototype.hasOwnProperty.call(m, prop)) {\n      Object.defineProperty(globals, prop, {\n        value: m[prop as keyof typeof m],\n        writable: true,\n        configurable: true,\n      });\n    }\n  }\n}\n"],"names":["normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","Symbol","Headers","constructor","headers","this","map","forEach","append","Array","isArray","header","Object","getOwnPropertyNames","oldValue","delete","has","hasOwnProperty","get","set","callback","thisArg","call","keys","push","values","entries","globals","self","window","globalThis","m","prop","prototype","defineProperty","writable","configurable"],"mappings":"qPAAA,SAASA,EAAcC,GAIrB,GAHoB,iBAATA,IACTA,EAAOC,OAAOD,IAEZ,6BAA6BE,KAAKF,IAAkB,KAATA,EAC7C,MAAM,IAAIG,UACR,4CAA8CH,EAAO,KAGzD,OAAOA,EAAKI,aACd,CAEA,SAASC,EAAeC,GAItB,MAHqB,iBAAVA,IACTA,EAAQL,OAAOK,IAEVA,CACT,CAEA,SAASC,EAAkBC,GACzB,IAAIC,EAAgC,CAElCC,OACE,IAAIJ,EAAQE,EAAMG,QAClB,MAAO,CAAEC,UAAgBC,IAAVP,EAAqBA,MAAOA,EAC5C,EACD,CAACQ,OAAOL,UAAS,IACRA,GAIX,OAAOA,CACT,CAEc,MAAOM,EAGnBC,YAAYC,GAFZC,KAAGC,IAA2B,GAGxBF,aAAmBF,EACrBE,EAAQG,SAAQ,CAACd,EAAON,KACtBkB,KAAKG,OAAOrB,EAAMM,EAAM,IAEjBgB,MAAMC,QAAQN,GACvBA,EAAQG,SAASI,IACfN,KAAKG,OAAOG,EAAO,GAAIA,EAAO,GAAG,IAE1BP,GACTQ,OAAOC,oBAAoBT,GAASG,SAASpB,IAC3CkB,KAAKG,OAAOrB,EAAOiB,EAAgBjB,GAAM,GAG9C,CAEDqB,OAAOrB,EAAuBM,GAC5BN,EAAOD,EAAcC,GACrBM,EAAQD,EAAeC,GACvB,IAAIqB,EAAWT,KAAKC,IAAInB,GACxBkB,KAAKC,IAAInB,GAAQ2B,EAAWA,EAAW,KAAOrB,EAAQA,CACvD,CAEDsB,OAAO5B,UACEkB,KAAKC,IAAIpB,EAAcC,GAC/B,CAED6B,IAAI7B,GACF,OAAOkB,KAAKC,IAAIW,eAAe/B,EAAcC,GAC9C,CAED+B,IAAI/B,GAEF,OADAA,EAAOD,EAAcC,GACdkB,KAAKW,IAAI7B,GAAQkB,KAAKC,IAAInB,GAAQ,IAC1C,CAEDgC,IAAIhC,EAAuBM,GACzBY,KAAKC,IAAIpB,EAAcC,IAASK,EAAeC,EAChD,CAEDc,QACEa,EACAC,GAEA,IAAK,IAAIlC,KAAQkB,KAAKC,IAChBD,KAAKC,IAAIW,eAAe9B,IAC1BiC,EAASE,KAAKD,EAAShB,KAAKC,IAAInB,GAAOA,EAAMkB,KAGlD,CAEDkB,OACE,IAAI5B,EAAkB,GAItB,OAHAU,KAAKE,SAAQ,SAAUd,EAAON,GAC5BQ,EAAM6B,KAAKrC,EACb,IACOO,EAAYC,EACpB,CAED8B,SACE,IAAI9B,EAAkB,GAItB,OAHAU,KAAKE,SAAQ,SAAUd,GACrBE,EAAM6B,KAAK/B,EACb,IACOC,EAAYC,EACpB,CAED+B,UACE,IAAI/B,EAAoB,GAIxB,OAHAU,KAAKE,SAAQ,SAAUd,EAAON,GAC5BQ,EAAM6B,KAAK,CAACrC,EAAMM,GACpB,IACOC,EAAYC,EACpB,CAED,CAACM,OAAOL,YACN,OAAOS,KAAKqB,SACb,ECrGI,MAAMC,EAVS,oBAATC,KACFA,KACoB,oBAAXC,OACTA,OACwB,oBAAfC,WACTA,gBADF,ECFHC,EAAI,CACR7B,WAIF,QAAuB,IAAZyB,EACT,IAAK,MAAMK,KAAQD,EACbnB,OAAOqB,UAAUhB,eAAeK,KAAKS,EAAGC,IAC1CpB,OAAOsB,eAAeP,EAASK,EAAM,CACnCvC,MAAOsC,EAAEC,GACTG,UAAU,EACVC,cAAc"}