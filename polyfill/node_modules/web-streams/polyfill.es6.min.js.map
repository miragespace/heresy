{"version":3,"file":"polyfill.es6.min.js","sources":["../../../js/src/web-streams/utils.ts","../../../js/src/web-streams/lib/helpers/miscellaneous.ts","../../../js/src/web-streams/lib/helpers/webidl.ts","../../../js/src/web-streams/lib/simple-queue.ts","../../../js/src/web-streams/lib/readable-stream/generic-reader.ts","../../../js/src/web-streams/lib/abstract-ops/internal-methods.ts","../../../js/src/web-streams/stub/number-isfinite.ts","../../../js/src/web-streams/stub/math-trunc.ts","../../../js/src/web-streams/lib/validators/basic.ts","../../../js/src/web-streams/lib/validators/readable-stream.ts","../../../js/src/web-streams/lib/readable-stream/default-reader.ts","../../../js/src/web-streams/target/es5/stub/async-iterator-prototype.ts","../../../js/src/web-streams/lib/readable-stream/async-iterator.ts","../../../js/src/web-streams/stub/number-isnan.ts","../../../js/src/web-streams/lib/abstract-ops/ecmascript.ts","../../../js/src/web-streams/lib/abstract-ops/miscellaneous.ts","../../../js/src/web-streams/lib/abstract-ops/queue-with-sizes.ts","../../../js/src/web-streams/lib/readable-stream/byte-stream-controller.ts","../../../js/src/web-streams/lib/readable-stream/byob-reader.ts","../../../js/src/web-streams/lib/abstract-ops/queuing-strategy.ts","../../../js/src/web-streams/lib/validators/queuing-strategy.ts","../../../js/src/web-streams/lib/validators/underlying-sink.ts","../../../js/src/web-streams/lib/validators/writable-stream.ts","../../../js/src/web-streams/lib/abort-signal.ts","../../../js/src/web-streams/lib/writable-stream.ts","../../../js/src/web-streams/stub/native.ts","../../../js/src/web-streams/stub/dom-exception.ts","../../../js/src/web-streams/lib/readable-stream/pipe.ts","../../../js/src/web-streams/lib/readable-stream/default-controller.ts","../../../js/src/web-streams/lib/readable-stream/tee.ts","../../../js/src/web-streams/lib/validators/underlying-source.ts","../../../js/src/web-streams/lib/validators/reader-options.ts","../../../js/src/web-streams/lib/validators/pipe-options.ts","../../../js/src/web-streams/lib/readable-stream.ts","../../../js/src/web-streams/lib/validators/readable-writable-pair.ts","../../../js/src/web-streams/lib/validators/iterator-options.ts","../../../js/src/web-streams/lib/validators/queuing-strategy-init.ts","../../../js/src/web-streams/lib/byte-length-queuing-strategy.ts","../../../js/src/web-streams/lib/count-queuing-strategy.ts","../../../js/src/web-streams/lib/validators/transformer.ts","../../../js/src/web-streams/lib/transform-stream.ts","../../../js/src/web-streams/polyfill.ts"],"sourcesContent":["/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator](this: AsyncIterator<any>) {\n      return this;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\ntry {\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\ntry {\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","import {\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  ReadableByteStreamController,\n  ReadableStream,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultReader,\n  TransformStream,\n  TransformStreamDefaultController,\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter\n} from './ponyfill';\nimport { globals } from './utils';\n\n// Export\nexport * from './ponyfill';\n\nconst exports = {\n  ReadableStream,\n  ReadableStreamDefaultController,\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader,\n\n  WritableStream,\n  WritableStreamDefaultController,\n  WritableStreamDefaultWriter,\n\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n\n  TransformStream,\n  TransformStreamDefaultController\n};\n\n// Add classes to global scope\nif (typeof globals !== 'undefined') {\n  for (const prop in exports) {\n    if (Object.prototype.hasOwnProperty.call(exports, prop)) {\n      Object.defineProperty(globals, prop, {\n        value: exports[prop as (keyof typeof exports)],\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n}\n"],"names":["noop","globals","getGlobals","self","window","globalThis","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","undefined","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","SimpleQueue","constructor","this","_cursor","_size","_front","_elements","_next","_back","length","push","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","shift","oldFront","newFront","oldCursor","newCursor","elements","forEach","callback","i","node","peek","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","AbortSteps","Symbol","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","isDictionary","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","releaseLock","Object","hasOwnProperty","_disturbed","_readableStreamController","AsyncIteratorPrototype","defineProperties","enumerable","toStringTag","defineProperty","configurable","asyncIterator","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","return","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","_a","setPrototypeOf","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","CloneAsUint8Array","O","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","IsNonNegativeNumber","Infinity","RangeError","ResetQueue","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","error","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","shouldPull","ReadableByteStreamControllerShouldCallPull","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","readIntoRequest","_readIntoRequests","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInternal","firstDescriptor","ReadableByteStreamControllerRespondInClosedState","ReadableByteStreamControllerRespondInReadableState","remainderSize","remainder","transferredBuffer","firstPendingPullInto","ReadableStreamError","create","SetUpReadableStreamBYOBRequest","request","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","r","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","ReadableByteStreamControllerPullInto","DataView","BYTES_PER_ELEMENT","ctor","emptyView","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","original","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","convertUnderlyingSink","abort","start","type","write","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","locked","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","WritableStreamDefaultControllerClose","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseReset","defaultWriterReadyPromiseInitialize","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterGetDesiredSize","WritableStreamDefaultControllerGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamAddWriteRequest","WritableStreamDefaultControllerWrite","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException","signal","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","createAbortController","_writeAlgorithm","_closeAlgorithm","PeekQueueValue","WritableStreamDefaultControllerProcessClose","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessWrite","WritableStreamMarkFirstWriteRequestInFlight","sinkWritePromise","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","createDOMExceptionPolyfill","message","Error","captureStackTrace","writable","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","action","aborted","addEventListener","isOrBecomesErrored","shutdown","isOrBecomesClosed","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","pipeLoop","resolveLoop","rejectLoop","pipeStep","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","ReadableStreamTee","cloneForBranch2","ReadableByteStreamTee","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","clonedChunk","otherCanceled","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableByteStream","ReadableStreamDefaultTee","readAgain","CreateReadableStream","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReadableStreamReaderMode","mode","convertPipeOptions","options","assertAbortSignal","isAbortSignal","Boolean","ReadableStream","rawUnderlyingSource","underlyingSource","convertUnderlyingDefaultOrByteSource","pull","InitializeReadableStream","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","SetUpReadableStreamDefaultControllerFromUnderlyingSource","getReader","rawOptions","convertReaderOptions","pipeThrough","rawTransform","transform","convertReadableWritablePair","readable","pipeTo","destination","tee","values","AcquireReadableStreamAsyncIterator","impl","iterator","convertIteratorOptions","convertQueuingStrategyInit","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","convertTransformer","flush","readableType","writableType","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","InitializeTransformStream","startPromise","TransformStreamDefaultSinkWriteAlgorithm","_transformStreamController","_backpressureChangePromise","_writable","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamError","TransformStreamDefaultSinkCloseAlgorithm","_readable","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultSourcePullAlgorithm","TransformStreamSetBackpressure","TransformStreamErrorWritableAndUnblockWrite","CreateWritableStream","_backpressureChangePromise_resolve","SetUpTransformStreamDefaultControllerFromTransformer","TransformStreamDefaultController","transformAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","flushAlgorithm","SetUpTransformStreamDefaultController","_controlledTransformStream","_transformAlgorithm","IsTransformStream","IsTransformStreamDefaultController","TransformStreamDefaultControllerError","terminate","TransformStreamDefaultControllerTerminate","readableController","ReadableStreamDefaultControllerHasBackpressure","exports","prop"],"mappings":"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"}