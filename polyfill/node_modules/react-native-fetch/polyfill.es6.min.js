!function(factory){"function"==typeof define&&define.amd?define(factory):factory()}((function(){"use strict";async function drainStream(stream){const chunks=[],reader=stream.getReader();const bytes=await async function readNextChunk(){const{done:done,value:value}=await reader.read();return done?chunks.reduce(((bytes,chunk)=>[...bytes,...chunk]),[]):(chunks.push(value),readNextChunk())}();return new Uint8Array(bytes)}function readArrayBufferAsText(array){return(new TextDecoder).decode(array)}const globals=function getGlobals(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:void 0}();function normalizeName(name){if("string"!=typeof name&&(name=String(name)),0===(name=name.trim()).length)throw new TypeError("Header field name is empty");if(/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name))throw new TypeError(`Invalid character in header field name: ${name}`);return name.toLowerCase()}function normalizeValue(value){return"string"!=typeof value&&(value=String(value)),value}class Headers{constructor(init){if(this.map=new Map,init instanceof Headers)return init.forEach(((value,name)=>{this.append(name,value)})),this;if(Array.isArray(init))return init.forEach((([name,value])=>{this.append(name,value)})),this;if(init)for(const name in init)this.append(name,init[name])}append(name,value){name=normalizeName(name),value=normalizeValue(value);const oldValue=this.get(name);this.map.set(name,oldValue?oldValue+", "+value:value)}delete(name){this.map.delete(normalizeName(name))}get(name){var _a;return name=normalizeName(name),null!==(_a=this.map.get(name))&&void 0!==_a?_a:null}has(name){return this.map.has(normalizeName(name))}set(name,value){this.map.set(normalizeName(name),normalizeValue(value))}forEach(callback,thisArg){this.map.forEach(((value,name)=>{callback.call(thisArg,value,name,this)}),this)}keys(){return this.map.keys()}values(){return this.map.values()}entries(){return this.map.entries()}[Symbol.iterator](){return this.entries()}}class Body{constructor(body){return this.bodyInit=body,body instanceof URLSearchParams?(this._bodyText=this.bodyInit=body.toString(),this._mimeType="application/x-www-form-urlencoded;charset=UTF-8",this):body instanceof ArrayBuffer?(this._bodyArrayBuffer=body.slice(0),this._mimeType="application/octet-stream",this):ArrayBuffer.isView(body)?(this._bodyArrayBuffer=body.buffer,this._mimeType="application/octet-stream",this):body instanceof ReadableStream?(this._bodyReadableStream=body,this._mimeType="application/octet-stream",this):void(body&&(this._bodyText=body.toString(),this._mimeType="text/plain;charset=UTF-8"))}__consumed(){if(this._consumed)return Promise.reject(new TypeError("Already read"));this._consumed=!0}async arrayBuffer(){const alreadyConsumed=this.__consumed();if(alreadyConsumed)return alreadyConsumed;if(this._bodyReadableStream){return(await drainStream(this._bodyReadableStream)).buffer}if(this._bodyArrayBuffer){if(ArrayBuffer.isView(this._bodyArrayBuffer)){const{buffer:buffer,byteOffset:byteOffset,byteLength:byteLength}=this._bodyArrayBuffer;return Promise.resolve(buffer.slice(byteOffset,byteOffset+byteLength))}return Promise.resolve(this._bodyArrayBuffer)}const text=this._bodyText;return(new TextEncoder).encode(text)}async text(){const alreadyConsumed=this.__consumed();if(alreadyConsumed)return alreadyConsumed;if(this._bodyReadableStream){return readArrayBufferAsText(await drainStream(this._bodyReadableStream))}return this._bodyArrayBuffer?readArrayBufferAsText(this._bodyArrayBuffer):this._bodyText}async json(){const text=await this.text();return JSON.parse(text)}get body(){if(this._bodyReadableStream)return this._bodyReadableStream;if(this._bodyArrayBuffer){const typedArray=new Uint8Array(this._bodyArrayBuffer);return new ReadableStream({start(controller){typedArray.forEach((chunk=>{controller.enqueue(chunk)})),controller.close()}})}if(this._bodyText){const text=this._bodyText,encoder=new TextEncoder;return new ReadableStream({start:async controller=>{new Uint8Array(encoder.encode(text)).forEach((chunk=>{controller.enqueue(chunk)})),controller.close()}})}return null}get bodyUsed(){return this._consumed}}class Request extends Body{constructor(input,options){var _a,_b,_c;if(input instanceof Request){if(input.bodyInit&&input.bodyUsed)throw new TypeError("Already read");super(input.body),this.url=input.url,this.method=input.method,this.headers=new Headers(null!==(_a=options.headers)&&void 0!==_a?_a:input.headers),input.bodyInit&&(input._consumed=!0)}else{if(options instanceof Request){if(options.bodyInit&&options.bodyUsed)throw new TypeError("Already read");super(options.body),options.bodyInit&&(options._consumed=!0)}else super(null!==(_b=options.body)&&void 0!==_b?_b:null);this.url=input,this.method=options.method||"GET",this.headers=null!==(_c=this.headers)&&void 0!==_c?_c:new Headers(options.headers)}if(this.bodyInit&&["GET","HEAD"].includes(this.method))throw new TypeError("Body not allowed for GET or HEAD requests");this.bodyInit&&!this.headers.has("content-type")&&this._mimeType&&this.headers.set("content-type",this._mimeType)}clone(){return new Request(this,{body:this.bodyInit})}}class Response extends Body{constructor(body,options){var _a,_b;super(body),this.status=null!==(_a=options.status)&&void 0!==_a?_a:200,this.ok=this.status>=200&&this.status<300,this.statusText=null!==(_b=options.statusText)&&void 0!==_b?_b:"",this.headers=new Headers(options.headers),this.url=options instanceof Response?options.url:"",!this.headers.has("content-type")&&this._mimeType&&this.headers.set("content-type",this._mimeType)}clone(){return new Response(this.bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})}static redirect(url,status){if(![301,302,303,307,308].includes(status))throw new RangeError(`Invalid status code: ${status}`);return new Response(null,{status:status,headers:{location:url}})}}const m={Headers:Headers,Request:Request,Response:Response};if(void 0!==globals)for(const prop in m)Object.prototype.hasOwnProperty.call(m,prop)&&Object.defineProperty(globals,prop,{value:m[prop],writable:!0,configurable:!0})}));
//# sourceMappingURL=polyfill.es6.min.js.map
